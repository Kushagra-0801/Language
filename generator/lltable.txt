`$`import`;`IDENT`::`mod`{`}`enum`,`(`)`struct`const`:`=`fn`->`break`continue`print`let`for`in`while`return`if`else`LITERAL`[`]`.`+`-`*`/`==`|`||`&`&&`!`~`>`<`>=`<=`^`%`+=`-=`*=`/=`|=`&=`^=`%=`
S`S ::= PROGRAM $`S ::= PROGRAM $````S ::= PROGRAM $```S ::= PROGRAM $````S ::= PROGRAM $`S ::= PROGRAM $```S ::= PROGRAM $`````````````````````````````````````````
PROGRAM`PROGRAM ::= IMPORT_ITEMS CODE_ITEMS`PROGRAM ::= IMPORT_ITEMS CODE_ITEMS````PROGRAM ::= IMPORT_ITEMS CODE_ITEMS``PROGRAM ::= IMPORT_ITEMS CODE_ITEMS`PROGRAM ::= IMPORT_ITEMS CODE_ITEMS````PROGRAM ::= IMPORT_ITEMS CODE_ITEMS`PROGRAM ::= IMPORT_ITEMS CODE_ITEMS```PROGRAM ::= IMPORT_ITEMS CODE_ITEMS`````````````````````````````````````````
IMPORT_ITEMS`IMPORT_ITEMS ::= ε`IMPORT_ITEMS ::= IMPORT IMPORT_ITEMS````IMPORT_ITEMS ::= ε``IMPORT_ITEMS ::= ε`IMPORT_ITEMS ::= ε````IMPORT_ITEMS ::= ε`IMPORT_ITEMS ::= ε```IMPORT_ITEMS ::= ε`````````````````````````````````````````
IMPORT``IMPORT ::= import PATH_I ;````````````````````````````````````````````````````````
PATH_I````PATH_I ::= IDENT PATH``````````````````````````````````````````````````````
PATH```PATH ::= ε`PATH ::= ε`PATH ::= :: PATH_I``PATH ::= ε`PATH ::= ε``PATH ::= ε`PATH ::= ε`PATH ::= ε````PATH ::= ε`````````````PATH ::= ε`PATH ::= ε`PATH ::= ε`PATH ::= ε``````````````````PATH ::= ε`PATH ::= ε`PATH ::= ε`PATH ::= ε`PATH ::= ε`PATH ::= ε`PATH ::= ε`PATH ::= ε`
CODE_ITEMS`CODE_ITEMS ::= ε`````CODE_ITEMS ::= ITEM CODE_ITEMS``CODE_ITEMS ::= ε`CODE_ITEMS ::= ITEM CODE_ITEMS````CODE_ITEMS ::= ITEM CODE_ITEMS`CODE_ITEMS ::= ITEM CODE_ITEMS```CODE_ITEMS ::= ITEM CODE_ITEMS`````````````````````````````````````````
ITEM``````ITEM ::= MODULE```ITEM ::= ENUM````ITEM ::= STRUCT`ITEM ::= CONSTANT```ITEM ::= FUNCTION`````````````````````````````````````````
MODULE``````MODULE ::= mod IDENT { PROGRAM }````````````````````````````````````````````````````
ENUM`````````ENUM ::= enum IDENT { VARIANTS }`````````````````````````````````````````````````
VARIANTS````VARIANTS ::= VARIANT EXTRA_VARIANT````VARIANTS ::= ε``````````````````````````````````````````````````
EXTRA_VARIANT````````EXTRA_VARIANT ::= ε``EXTRA_VARIANT ::= , VARIANTS````````````````````````````````````````````````
VARIANT````VARIANT ::= IDENT REM``````````````````````````````````````````````````````
REM````````REM ::= ε``REM ::= ε`REM ::= ( PATH_I )```````````````````````````````````````````````
STRUCT`````````````STRUCT ::= struct IDENT { ARGS }`````````````````````````````````````````````
CONSTANT``````````````CONSTANT ::= const IDENT : PATH_I = EXPR ;````````````````````````````````````````````
FUNCTION`````````````````FUNCTION ::= fn IDENT ( ARGS ) -> PATH_I { STMTS }`````````````````````````````````````````
ARGS````ARGS ::= ARG EXTRA_ARGS````ARGS ::= ε````ARGS ::= ε``````````````````````````````````````````````
EXTRA_ARGS````````EXTRA_ARGS ::= ε``EXTRA_ARGS ::= , ARGS``EXTRA_ARGS ::= ε``````````````````````````````````````````````
ARG````ARG ::= IDENT : PATH_I``````````````````````````````````````````````````````
STMTS````STMTS ::= STMT STMTS````STMTS ::= ε```````````STMTS ::= STMT STMTS`STMTS ::= STMT STMTS`STMTS ::= STMT STMTS`STMTS ::= STMT STMTS`STMTS ::= STMT STMTS``STMTS ::= STMT STMTS`STMTS ::= STMT STMTS`STMTS ::= STMT STMTS```````````````````````````````
STMT````STMT ::= ASSIGNMENT```````````````STMT ::= break ;`STMT ::= continue ;`STMT ::= print EXPR ;`STMT ::= BINDING`STMT ::= FOR_LOOP``STMT ::= WHILE_LOOP`STMT ::= RETURN`STMT ::= IF_ELSE```````````````````````````````
ASSIGNMENT````ASSIGNMENT ::= ACCESS_TYPE EQ_OP EXPR ;``````````````````````````````````````````````````````
BINDING``````````````````````BINDING ::= let IDENT = EXPR ;````````````````````````````````````
FOR_LOOP```````````````````````FOR_LOOP ::= for IDENT in EXPR { STMTS }```````````````````````````````````
WHILE_LOOP`````````````````````````WHILE_LOOP ::= while EXPR { STMTS }`````````````````````````````````
RETURN``````````````````````````RETURN ::= return EXPR ;````````````````````````````````
IF_ELSE```````````````````````````IF_ELSE ::= if EXPR { STMTS } NEXT```````````````````````````````
NEXT````NEXT ::= ε````NEXT ::= ε```````````NEXT ::= ε`NEXT ::= ε`NEXT ::= ε`NEXT ::= ε`NEXT ::= ε``NEXT ::= ε`NEXT ::= ε`NEXT ::= ε`NEXT ::= else ELSE_PART``````````````````````````````
ELSE_PART```````ELSE_PART ::= { STMTS }````````````````````ELSE_PART ::= IF_ELSE```````````````````````````````
EXPR````EXPR ::= ACCESS_TYPE```````EXPR ::= ( OPERATOR ARG_LIST )``````````````````EXPR ::= LITERAL`EXPR ::= [ ARG_LIST ]````````````````````````````
ACCESS_TYPE````ACCESS_TYPE ::= PATH_I ANY_ACCESS``````````````````````````````````````````````````````
ANY_ACCESS```ANY_ACCESS ::= MEMBER_ACCESS`ANY_ACCESS ::= MEMBER_ACCESS```ANY_ACCESS ::= MEMBER_ACCESS````ANY_ACCESS ::= MEMBER_ACCESS`ANY_ACCESS ::= MEMBER_ACCESS````ANY_ACCESS ::= MEMBER_ACCESS`````````````ANY_ACCESS ::= MEMBER_ACCESS`ANY_ACCESS ::= MEMBER_ACCESS`ANY_ACCESS ::= MEMBER_ACCESS`ANY_ACCESS ::= MEMBER_ACCESS``````````````````ANY_ACCESS ::= MEMBER_ACCESS`ANY_ACCESS ::= MEMBER_ACCESS`ANY_ACCESS ::= MEMBER_ACCESS`ANY_ACCESS ::= MEMBER_ACCESS`ANY_ACCESS ::= MEMBER_ACCESS`ANY_ACCESS ::= MEMBER_ACCESS`ANY_ACCESS ::= MEMBER_ACCESS`ANY_ACCESS ::= MEMBER_ACCESS`
MEMBER_ACCESS```MEMBER_ACCESS ::= ε`MEMBER_ACCESS ::= ε```MEMBER_ACCESS ::= ε````MEMBER_ACCESS ::= ε`MEMBER_ACCESS ::= ε````MEMBER_ACCESS ::= ε`````````````MEMBER_ACCESS ::= ε`MEMBER_ACCESS ::= ε`MEMBER_ACCESS ::= ε`MEMBER_ACCESS ::= . IDENT MEMBER_ACCESS``````````````````MEMBER_ACCESS ::= ε`MEMBER_ACCESS ::= ε`MEMBER_ACCESS ::= ε`MEMBER_ACCESS ::= ε`MEMBER_ACCESS ::= ε`MEMBER_ACCESS ::= ε`MEMBER_ACCESS ::= ε`MEMBER_ACCESS ::= ε`
OPERATOR````OPERATOR ::= PATH_I`````````````````````````````OPERATOR ::= OP`OPERATOR ::= OP`OPERATOR ::= OP`OPERATOR ::= OP`OPERATOR ::= OP`OPERATOR ::= OP`OPERATOR ::= OP`OPERATOR ::= OP`OPERATOR ::= OP`OPERATOR ::= OP`OPERATOR ::= OP`OPERATOR ::= OP`OPERATOR ::= OP`OPERATOR ::= OP`OPERATOR ::= OP`OPERATOR ::= OP`OPERATOR ::= OP`````````
ARG_LIST````ARG_LIST ::= EXPR ARG_LIST```````ARG_LIST ::= EXPR ARG_LIST`ARG_LIST ::= ε`````````````````ARG_LIST ::= EXPR ARG_LIST`ARG_LIST ::= EXPR ARG_LIST`ARG_LIST ::= ε```````````````````````````
OP`````````````````````````````````OP ::= +`OP ::= -`OP ::= *`OP ::= /`OP ::= ==`OP ::= |`OP ::= ||`OP ::= &`OP ::= &&`OP ::= !`OP ::= ~`OP ::= >`OP ::= <`OP ::= >=`OP ::= <=`OP ::= ^`OP ::= %`````````
EQ_OP````````````````EQ_OP ::= =``````````````````````````````````EQ_OP ::= +=`EQ_OP ::= -=`EQ_OP ::= *=`EQ_OP ::= /=`EQ_OP ::= |=`EQ_OP ::= &=`EQ_OP ::= ^=`EQ_OP ::= %=`
