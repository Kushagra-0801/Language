keyword = [import, fn, struct, let, mod, const, enum]
          [if, else, return, while, for, in, break, continue, print]

values = [integers, floats, true, false, string literals, character literals, arrays]

symbols = [+, -, *, /, :, ., ;, ::, ==, +=, -=, *=, =, /=, |, ||, &, &&, !, ~, >, <, >=, <=, [], {}, (), ^, %, #]

PROGRAM     :=  IMPORT_ITEMS CODE_ITEMS

IMPORT_ITEMS:= e | IMPORT IMPORT_ITEMS

IMPORT      := import PATH ;

PATH        := IDENT (::PATH)*

IDENT       := [a-zA-Z_][a-zA-Z0-9_]*

CODE_ITEMS  := e | ITEM CODE_ITEMS

ITEM        := FUNCTION | STRUCT | MODULE | CONSTANT | ENUM

FUNCTION    := fn IDENT (ARGS) (-> PATH)? { STATEMENT* }

ARGS        := e | ARG [, ARGS]

ARG         := IDENT : PATH

STRUCT      := struct IDENT { ARG,* }

MODULE      := mod IDENT { PROGRAM }

CONSTANT    := const IDENT : PATH = EXPR

ENUM        := enum IDENT { VARIANT* }

VARIANT     := IDENT | IDENT (PATH)

EXPR        := # expression

STATEMENT   := BINDING | EXPR ;

BINDING     := let IDENT (: PATH)? = EXPR

