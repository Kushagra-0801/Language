keyword = [import, fn, struct, let, mod, const, enum]
          [if, else, return, while, for, in, break, continue, print]


symbols = [+, -, *, /, :, ., ;, ::, ==, +=, -=, *=, =, /=, |, ||, &, &&, !, ~, >, <, >=, <=, [], {}, (), ^, %, #]


ITEM        := FUNCTION | STRUCT | MODULE | CONSTANT | ENUM

FUNCTION    := fn IDENT (ARGS) (-> PATH)? { STATEMENT* }

ARGS        := e | ARG [, ARGS]

ARG         := IDENT : PATH

STRUCT      := struct IDENT { ARG,* }

MODULE      := mod IDENT { PROGRAM }

CONSTANT    := const IDENT : PATH = EXPR

ENUM        := enum IDENT { VARIANT* }

VARIANT     := IDENT | IDENT (PATH)

EXPR        := # EXPR

STATEMENT   := BINDING | EXPR ;

BINDING     := let IDENT (: PATH)? = EXPR



https://mikedevice.github.io/first-follow/

******************************************************************************************


PROGRAM::=  IMPORT_ITEMS CODE_ITEMS
IMPORT_ITEMS::= ''
IMPORT_ITEMS::=  IMPORT IMPORT_ITEMS
IMPORT::=  import PATH_I ;
PATH_I::=  IDENT PATH
PATH::= ''
PATH::=  :: PATH_I
CODE_ITEMS::= ''
CODE_ITEMS::=  ITEM CODE_ITEMS
ITEM::= FUNCTION
ITEM::= STRUCT
ITEM::= ENUM
ITEM::= CONSTANT
ITEM::= MODULE
MODULE::= mod IDENT { PROGRAM }
ENUM::= enum IDENT { VARIANTS }
VARIANTS::= ''
VARIANTS::= VARIANT EXTRA_VARIANT
EXTRA_VARIANT::= , VARIANTS
EXTRA_VARIANT::= ''
VARIANT::= IDENT REM
REM::= ( PATH_I ) 
REM::= ''
STRUCT::= struct IDENT { ARGS }
CONSTANT::= const IDENT : PATH_I = EXPR ;
FUNCTION::= fn IDENT ( ARGS ) -> PATH_I { STMTS }
ARGS::= ''
ARGS::= ARG EXTRA_ARGS
EXTRA_ARGS::= , ARGS
EXTRA_ARGS::= ''
ARG::= IDENT : PATH_I
STMTS::= ''
STMTS::= STMT STMTS
STMT::= break ;
STMT::= continue ;
STMT::= BINDING
STMT::= print EXPR ;
STMT::= ASSIGNMENT
ASSIGNMENT::= ACCESS_TYPE EQ_OP EXPR ;
BINDING::= let IDENT : PATH_I = EXPR ;
STMT::= FOR_LOOP
STMT::= WHILE_LOOP
STMT::= IF_ELSE
STMT::= RETURN
FOR_LOOP::= for IDENT in EXPR { STMTS } 
WHILE_LOOP::= while EXPR { STMTS }
RETURN::= return EXPR ;
IF_ELSE::= if EXPR { STMTS } NEXT
NEXT::= ''
NEXT::= else ELSE_PART
ELSE_PART::= { STMTS }
ELSE_PART::= IF_ELSE
EXPR::= LITERAL
EXPR::= ACCESS_TYPE
EXPR::= ( OPERATOR ARG_LIST )
EXPR::= [ ARG_LIST ]
ACCESS_TYPE::= PATH_I ANY_ACCESS
ANY_ACCESS::= MEMBER_ACCESS
MEMBER_ACCESS::= ''
MEMBER_ACCESS::= . IDENT MEMBER_ACCESS
OPERATOR::= OP
OPERATOR::= PATH_I
ARG_LIST::= ''
ARG_LIST::= EXPR ARG_LIST
OP::= +
OP::= -
OP::= *
OP::= /
OP::= ==
OP::= |
OP::= ||
OP::= &
OP::= &&
OP::= !
OP::= ~
OP::= >
OP::= <
OP::= >=
OP::= <=
OP::= ^
OP::= %
EQ_OP::= =
EQ_OP::= +=
EQ_OP::= -=
EQ_OP::= *=
EQ_OP::= /=
EQ_OP::= |=
EQ_OP::= &=
EQ_OP::= ^=
EQ_OP::= %=





example
id == (id+id)*(id | id)
(== 
 id (
    * (
        + id id
      ) 
      (
        | id id
      )
    )
)





// readability >>> writability because code is written once but read nearly 100 times
so we gav users the challenge to write in prefix
