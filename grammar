keyword = [import, fn, struct, let, mod, const, enum]

PROGRAM     :=  IMPORT*
                ITEM*

IMPORT      := import PATH ;

PATH        := IDENT (::PATH)*

IDENT       := [a-zA-Z_][a-zA-Z0-9_]*

ITEM        := FUNCTION | STRUCT | MODULE | CONSTANT | ENUM

FUNCTION    := fn IDENT (ARG,*) -> IDENT { STATEMENT* }

ARG         := IDENT : PATH

STRUCT      := struct IDENT { ARG,* }

MODULE      := mod IDENT { PROGRAM }

CONSTANT    := const IDENT : PATH = EXPR

ENUM        := enum IDENT { VARIANT* }

VARIANT     := IDENT | IDENT (PATH)

EXPR        := # expression

STATEMENT   := BINDING | EXPR ;

BINDING     := let IDENT (: PATH)? = EXPR
